%% LEX

% literals = "+-/*=()"                      # comment 1
% ignore = " \t\n"                          # comment 2
% tokens = [ 'VAR', 'NUMBER', 'ID', 'P']    # comment 3


# comment 4
r'[a-zA-Z_][a-zA-Z0-9_]*' return('VAR', t.value)
r'[a-zA-Z_][a-zA-Z0-9_]*' return('ID', )                        # comment 5
r'[a-zA-Z_][a-zA-Z0-9_]*' return('P', pass)                     # comment 6
r'\d+(\.\d+)?'            return('NUMBER', float(t.value) )
.                         error(f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]",t.lexer.skip(1) )   # comment 7

%% YACC

exp : exp '+' fas { p[0] = p[1] + p[3] }    # comment 8
stat : VAR '=' exp {
    ts[p[1]] = p[3]
    print("eu comi uma batata")             # comment 9
    if 1 == y.b:
        y.a += y.c
}
stat : exp { print(p[1]) }
stat : exp 
exp : exp '-' exp { p[0] = p[1] - p[3] }
exp : exp '*' exp { p[0] = p[1] * p[3] }
exp : exp '/' exp { p[0] = p[1] / p[3] }
fas : '-' stat                              # comment 10

%% # comment 11

def p_error(t):     # comment 12
    print(f"Syntax error at '{t.value}', [{t.lexer.lineno}]")

# comment 13 # comment 14

def getval(n):
    if n not in ts :
        print(f"Undefined name '{n}'")
        y.a += y.b
    return ts.get(n,0)

ts = {}
y = yacc.yacc()
y.a = 1
y.b = 1
y.c = 2
y.parse("3+4*7")   # comment 15